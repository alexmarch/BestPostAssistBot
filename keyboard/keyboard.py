from enum import Enum
from typing import Any, Dict

from aiogram.filters.callback_data import CallbackData
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButtonRequestChat,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

CheckState = {"on": "‚úÖ", "off": "‚òëÔ∏è"}

main_buttons = [
    "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç",
    "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç",
    # "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω",
    # "–®–∞–±–ª–æ–Ω—ã",
    "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
]

add_chat_channel_buttons = [
    "–ö–∞–Ω–∞–ª",
    "–ß–∞—Ç",
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
]

post_inline_buttons = [
    {
        "text": "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
        "action": "change_text",
        "type": "post_settings_action",
    },
    {
        "text": "üìé –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞",
        "action": "add_media",
        "type": "post_settings_action",
    },
    {
        "text": "üéõÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏",
        "action": "add_buttons",
        "type": "post_settings_action",
    },
    {
        "text": "üòä –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏",
        "action": "add_reactions",
        "type": "post_settings_action",
    },
    {"text": "–ó–≤—É–∫ üîä", "action": "sound", "type": "post_settings"},
    {"text": "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ üí¨", "action": "comments", "type": "post_settings"},
    {"text": "–ó–∞–∫—Ä–µ–ø–∏—Ç—å üìå", "action": "pin", "type": "post_settings"},
    {"text": "A–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å ‚úçÔ∏è", "action": "signature", "type": "post_settings"},
    {
        "text": "‚Äπ –ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã",
        "action": "add_chat_channel",
        "type": "post_settings_action",
    },
    {"text": "–î–∞–ª–µ–µ ‚Ä∫", "action": "next", "type": "post_settings_action"},
]


class EmojiButtonData(CallbackData, prefix="emoji"):
    action: str
    post_id: int
    id: int | None = None
    text: str | None = None
    type: str = "emoji_action"


class GeneralSettingsButtonData(CallbackData, prefix="settings"):
    action: str
    type: str = "general_settings"


class PostButtonData(CallbackData, prefix="post"):
    action: str
    type: str = "settings"


class PostMediaPositionData(CallbackData, prefix="post_media"):
    action: str
    media_position: str
    type: str = "media"


class ChannelData(CallbackData, prefix="channel"):
    action: str
    channel_id: int


def get_main_keyboard() -> ReplyKeyboardMarkup:
    rkb = ReplyKeyboardBuilder()
    for btn in main_buttons:
        rkb.button(text=btn)
    rkb.adjust(2)
    return rkb.as_markup()


def get_reaction_buttons_keyboard(state_data: dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –∫ –ø–æ—Å—Ç—É
    """
    ikb = InlineKeyboardBuilder()
    reactions = state_data.get("reactions", [])
    for reaction in reactions:
        ikb.button(
            text=reaction,
            callback_data=EmojiButtonData(
                action="add_reaction",
                post_id=-1,
                id=-1,
                text=reaction,
                type="emoji_action",
            ).pack(),
        )
    ikb.adjust(len(reactions))
    return ikb.as_markup()


def get_post_buttons_keyboard(
    state_data: dict[str, Any], post_id: int = -1
) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardBuilder()
    # buttton format  {"name": name, "url": url, "row": row, "column": column}
    buttons = state_data.get("buttons", [])
    for button in buttons:
        # check if button column is 0 it is a single button
        if button["column"] == 0:
            ikb.button(
                text=button["name"],
                url=button["url"],
                callback_data=EmojiButtonData(
                    action="add_reaction",
                    post_id=post_id,
                    type="emoji_action",
                ).pack(),
            )
        else:
            ikb.row()
            ikb.button(
                text=button["name"],
                url=button["url"],
                callback_data=EmojiButtonData(
                    action="add_reaction",
                    post_id=post_id,
                    type="emoji_action",
                ).pack(),
            )
    ikb.adjust(len(buttons))
    return ikb.as_markup()


def get_confirm_post_keyboard(state_data: dict[str, Any]) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    date_frames_confirm = state_data.get("date_frames_confirm", None)
    time_frames = state_data.get("time_frames", [])
    time_frames_active_state = state_data.get("time_frames_active", "off")
    btn_text = "/".join(time_frames) if time_frames else ""

    inline_kb_list = [
        [
            InlineKeyboardButton(
                text="‚úÖ‚ö°Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=PostButtonData(
                    action="confirm_create_post", type="post_settings_action"
                ).pack(),
            )
        ],
        (
            [
                InlineKeyboardButton(
                    text=f"üìÖ {date_frames_confirm}",
                    callback_data=PostButtonData(
                        action="show_next_post_date_calendar",
                        type="post_settings_action",
                    ).pack(),
                )
            ]
            if date_frames_confirm
            else []
        ),
        (
            [
                InlineKeyboardButton(
                    text=f"{CheckState[time_frames_active_state]}‚è∞ –ü–æ—Å—Ç {btn_text}",
                    callback_data=PostButtonData(
                        action="active_multiposting_timeframe",
                        type="post_settings_action",
                    ).pack(),
                )
            ]
            if time_frames
            else []
        ),
        [
            InlineKeyboardButton(
                text=f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞",
                callback_data=GeneralSettingsButtonData(
                    action="show_multiposting_timeframe", type="general_settings_action"
                ).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É",
                callback_data=PostButtonData(
                    action="back", type="post_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_add_media_keyboard(state_data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ (üîº –í–≤–µ—Ä—Ö —Å –ø—Ä–µ–≤—å—é | üÜô –í–≤–µ—Ä—Ö –±–µ–∑ –ø—Ä–µ–≤—å—é | üîΩ –í–Ω–∏–∑ —Å –ø—Ä–µ–≤—å—é)
    """
    inline_kb_list = [
        [
            InlineKeyboardButton(
                text="üîº –í–≤–µ—Ä—Ö —Å –ø—Ä–µ–≤—å—é",
                callback_data=PostMediaPositionData(
                    action="add_media", media_position="top_preview"
                ).pack(),
            )
        ],
        # [
        #     InlineKeyboardButton(
        #         text="üÜô –í–≤–µ—Ä—Ö –±–µ–∑ –ø—Ä–µ–≤—å—é",
        #         callback_data=PostMediaPositionData(
        #             action="add_media", media_position="top_no_preview"
        #         ).pack(),
        #     ),
        # ],
        [
            InlineKeyboardButton(
                text="üîΩ –í–Ω–∏–∑ —Å –ø—Ä–µ–≤—å—é",
                callback_data=PostMediaPositionData(
                    action="add_media", media_position="bottom_preview"
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É",
                callback_data=PostButtonData(
                    action="back", type="post_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_back_to_post_keyboard(state_data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ—Å—Ç—É"""

    inline_kb_list = [
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É",
                callback_data=PostButtonData(
                    action="back", type="post_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_post_settings_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å—Ç–∞"""
    pass


def get_general_settings_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    inline_kb_list = [
        [
            InlineKeyboardButton(
                text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥–∞",
                callback_data=GeneralSettingsButtonData(
                    action="show_multiposting_timeframe", type="general_settings_action"
                ).pack(),
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_multiposting_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥–∞
    """
    time_frames = data.get("time_frames", [])
    time_frames_active_state = data.get("time_frames_active", "off")
    btn_text = "–í—ã–∫–ª—é—á–µ–Ω–æ" if time_frames_active_state == "off" else "–í–∫–ª—é—á–µ–Ω–æ"
    text = data.get("text", None)

    inline_kb_list = [
        (
            [
                InlineKeyboardButton(
                    text=f"{CheckState[time_frames_active_state]} {btn_text}",
                    callback_data=GeneralSettingsButtonData(
                        action="active_multiposting_timeframe",
                        type="general_settings_action",
                    ).pack(),
                )
            ]
            if time_frames
            else []
        ),
        (
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    callback_data=GeneralSettingsButtonData(
                        action="delete_multiposting_timeframe",
                        type="general_settings_action",
                    ).pack(),
                )
            ]
            if time_frames
            else []
        ),
        (
            [
                InlineKeyboardButton(
                    text=f"–ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É",
                    callback_data=PostButtonData(
                        action="back", type="post_settings_action"
                    ).pack(),
                )
            ]
            if text
            else []
        ),
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥",
                callback_data=GeneralSettingsButtonData(
                    action="back", type="general_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_confirm_calendar_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    """
    inline_kb_list = [
        [
            InlineKeyboardButton(
                text="‚úÖ‚ö°Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=PostButtonData(
                    action="date_frames_confirm", type="post_settings_action"
                ).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥",
                callback_data=PostButtonData(
                    action="show_next_post_date_calendar", type="post_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_post_publish_settings_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
    """
    inline_kb_list = [
        # [
        #     InlineKeyboardButton(
        #         text="üïí –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è",
        #         callback_data=PostButtonData(
        #             action="show_remove_time", type="post_settings_action"
        #         ).pack(),
        #     )
        # ],
        # [
        #     InlineKeyboardButton(
        #         text="‚ôªÔ∏è –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä/–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ—Å—Ç—å",
        #         callback_data=PostButtonData(
        #             action="show_auto_repeat", type="post_settings_action"
        #         ).pack(),
        #     )
        # ],
        [
            InlineKeyboardButton(
                text="üíº –û—Ç—á–µ—Ç –∫–ª–∏–µ—Ç—É",
                callback_data=PostButtonData(
                    action="show_send_report", type="post_settings_action"
                ).pack(),
            ),  # –ü—Ä–∏–≥—Ä–∞—Å–∏—Ç—å –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å id –∫–ª–∏–µ–Ω—Ç–∞
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å",
                callback_data=PostButtonData(
                    action="show_forword_report", type="post_settings_action"
                ).pack(),
            ),  # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç
        ],
        [
            InlineKeyboardButton(
                text="üìÖ –û—Ç–ª–æ–∂–∏—Ç—å",
                callback_data=PostButtonData(
                    action="show_next_post_date_calendar", type="post_settings_action"
                ).pack(),
            ),  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            InlineKeyboardButton(
                text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                callback_data=PostButtonData(
                    action="publish_post", type="post_settings_action"
                ).pack(),
            ),  # ‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        ],
        [
            InlineKeyboardButton(
                text="ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò",
                callback_data=PostButtonData(
                    action="ai_integration", type="post_settings_action"
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM",
                callback_data=PostButtonData(
                    action="crm_integration", type="post_settings_action"
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥",
                callback_data=PostButtonData(
                    action="back", type="post_settings_action"
                ).pack(),
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_channel_list_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""

    channel_list = data.get("chat_channel_list", [])
    channel_buttons = []

    action_buttons = [
        InlineKeyboardButton(
            text="‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            callback_data=PostButtonData(
                action="select_all_channels", type="post_settings_action"
            ).pack(),
        ),
    ]

    for channel in channel_list:
        btn_text = f'{CheckState[channel['checked']]} {channel["title"]}'

        if channel["checked"] == "on" and len(action_buttons) < 2:
            action_buttons.append(
                InlineKeyboardButton(
                    text="‚ö° –ü–û–î–¢–í–ï–†–î–ò–¢–¨",
                    callback_data=PostButtonData(
                        action="confirm", type="post_settings_action"
                    ).pack(),
                )
            )

        channel_buttons.append(
            InlineKeyboardButton(
                text=btn_text,
                callback_data=ChannelData(
                    action="check", channel_id=channel["id"]
                ).pack(),
            )
        )

    inline_kb_list = [
        channel_buttons,
        action_buttons,
        [
            InlineKeyboardButton(
                text="‚Äπ –ù–∞–∑–∞–¥",
                callback_data=PostButtonData(
                    action="back", type="post_settings_action"
                ).pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_settings_post_keyboard(data: Dict[str, Any]) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardBuilder()
    for btn in post_inline_buttons:
        if data.get("media_file_name") and btn["action"] == "add_media":
            btn["text"] = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞"
            btn["action"] = "remove_media"
        elif btn["action"] == "remove_media" and not data.get("media_file_name"):
            btn["text"] = "üìé –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"
            btn["action"] = "add_media"

        if data.get("reactions") and btn["action"] == "add_reactions":
            btn["text"] = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏"
            btn["action"] = "remove_reactions"
        elif not data.get("reactions") and btn["action"] == "remove_reactions":
            btn["text"] = "üòä –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏"
            btn["action"] = "add_reactions"

        if data.get("buttons") and btn["action"] == "add_buttons":
            btn["text"] = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏"
            btn["action"] = "remove_buttons"
        elif not data.get("buttons") and btn["action"] == "remove_buttons":
            btn["text"] = "üéõÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏"
            btn["action"] = "add_buttons"

        if btn["action"] == "sound":
            btn_text = f'{CheckState[data["sound"]]} {btn['text']}'
        elif btn["action"] == "comments":
            btn_text = f'{CheckState[data["comments"]]} {btn['text']}'
        elif btn["action"] == "pin":
            btn_text = f'{CheckState[data["pin"]]} {btn['text']}'
        elif btn["action"] == "signature":
            btn_text = f'{CheckState[data["signature"]]} {btn['text']}'
        else:
            btn_text = btn["text"]
        ikb.button(
            text=btn_text,
            callback_data=PostButtonData(action=btn["action"], type=btn["type"]),
        )
    ikb.adjust(2)
    return ikb.as_markup()


def get_chat_channel_keyboard() -> ReplyKeyboardMarkup:
    rkb = ReplyKeyboardBuilder()
    for btn in add_chat_channel_buttons:
        if btn == "–ö–∞–Ω–∞–ª":
            rkb.button(
                text=btn,
                request_chat=KeyboardButtonRequestChat(
                    request_id=1,
                    request_title=True,
                    chat_is_channel=True,
                    bot_is_member=True,
                    # bot_administrator_rights=ChatAdministratorRights(
                    #   is_anonymous=False,
                    #   can_manage_chat=False,
                    #   can_manage_video_chats=False,
                    #   can_promote_members=False,
                    #   can_change_info=False,
                    #   can_post_stories=False,
                    #   can_edit_stories=False,
                    #   can_delete_stories=False,
                    #   can_post_messages=True,
                    #   can_edit_messages=True,
                    #   can_delete_messages=True,
                    #   can_invite_users=True,
                    #   can_restrict_members=True,
                    #   can_pin_messages=True,
                    # )
                ),
            )
        elif btn == "–ß–∞—Ç":
            rkb.button(
                text=btn,
                request_chat=KeyboardButtonRequestChat(
                    request_id=2,
                    request_title=True,
                    chat_is_channel=False,
                    bot_is_member=True,
                    # bot_administrator_rights=ChatAdministratorRights(
                    #   is_anonymous=False,
                    #   can_manage_chat=False,
                    #   can_manage_video_chats=False,
                    #   can_promote_members=False,
                    #   can_change_info=False,
                    #   can_post_stories=False,
                    #   can_edit_stories=False,
                    #   can_delete_stories=False,
                    #   can_post_messages=True,
                    #   can_edit_messages=True,
                    #   can_delete_messages=True,
                    #   can_invite_users=True,
                    #   can_restrict_members=True,
                    # )
                ),
            )
        else:
            rkb.button(text=btn)
    rkb.adjust(2)
    return rkb.as_markup()
