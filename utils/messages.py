from datetime import datetime

from aiogram.utils.formatting import BlockQuote

from utils import format_date
from utils.scheduler import parse_schedule_string


def get_notify_update_version_message() -> str:
    return (
        "<b>üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï</b> –±–æ—Ç–∞!\n\n"
        "<b>–ú—ã</b> —Å—Ç–∞–ª–∏ –µ—â—ë –ª—É—á—à–µ üí™\n\n"
        "–ß—Ç–æ <b>–Ω–æ–≤–æ–≥–æ:</b>\n\n"
        "üêû <b>–ò—Å—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∞:</b> –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "üêû <b>–ò—Å—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∞:</b> –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞\n"
        "üêû <b>–ò—Å—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∞:</b> –ø–æ–≤–µ–¥–µ–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã\n"
        "üêû <b>–ò—Å—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∞:</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n"
        "‚≠ê <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–æ–º</b>\n"
        "‚≠ê <b>–î–æ—Ä–∞–±–æ—Ç–∞–Ω UI/UX</b>\n"
        "‚≠ê <b>–ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä/–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ—Å—Ç—å</b>\n\n"
        "‚ú® <b>–û–ø—Ä–æ–±—É–π—Ç–µ</b> –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üöÄ\n"
    )


def get_multiposting_message(time_frames: list) -> str:
    return f"""
<b>üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –º—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥–∞, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤.\n
–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n
üïí <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏</b>(–æ—Ç–ø—Ä–∞–≤—Ç–µ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤):\n
{BlockQuote("12:00 - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 12:00\n12 00 - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 12:00\n1200 - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 12:00\n12 00, 15 00, 18 00 - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 12:00, 15:00, 18:00").as_html()}\n
üïí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–æ–≤:</b>\n
{BlockQuote('30m - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n12h - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤\n1h 30m - –û–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π 1 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç').as_html()}\n
‚ö†Ô∏è <b>–í–ê–ñ–ù–û!</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞/–∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ—Å—Ç–∏ 15m (–º–∏–Ω—É—Ç)\n
{ '‚è∞ <b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n' if time_frames else "" }
<i>{"\n".join(time_frames) if time_frames else ""}</i>\n
"""


def get_confirm_auto_repeat_message(
    state_data: dict,
    time_frames_list: list,
    title: str = "<b>‚úÖ ‚ôªÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—Ü–∏–∫–ª–µ–Ω—ã–π –ø–æ—Å—Ç:</b>",
) -> str:
    total_posts = 0
    auto_repeat_dates = state_data.get("auto_repeat_dates", [])
    formated_dates = [format_date(date_str) for date_str in auto_repeat_dates]
    now = datetime.now()
    hour, minute = now.hour, now.minute
    # end of the day hour, minute

    end_of_day_hour, end_of_day_minute = 23, 59
    text_message = f"{title}\n\n"
    index = 0
    datetime_start, datetime_end = None, None

    for _time_interval in time_frames_list:

        _type, interval = parse_schedule_string(_time_interval)

        date_index = 0

        for date_str in formated_dates:
            if _type == "cron":
                next_time = f"{interval.get('hour'):02d}:{interval.get('minute'):02d}"
                total_posts += 1
            else:
                if (
                    index >= len(time_frames_list) - 1
                    and date_index == len(formated_dates) - 1
                    and index > 0
                ):  # last interval
                    hour = end_of_day_hour - interval.get("hours", 0)
                    minute = end_of_day_minute - interval.get("minutes", 0)
                else:
                    hour = hour + interval.get("hours", 0)
                    minute = minute + interval.get("minutes", 0)

                if hour >= 24:
                    hour = hour % 24
                if minute >= 60:
                    minute = minute % 60
                # No need to convert hour or minute to string here; use formatting below

                # calculate total posts depending on interval
                next_time = f"{hour:02d}:{minute:02d}"

            if index == 0 and date_index == 0:
                text_message += f"<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <i>{date_str} {next_time}</i>\n"
                # parse date string to datetime object and save as datetime_start
                datetime_start = datetime.strptime(
                    f"{date_str} {next_time}", "%d %a. %B %Y %H:%M"
                )
            elif (
                index >= len(time_frames_list) - 1
                and date_index == len(formated_dates) - 1
            ):
                text_message += (
                    f"<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <i>{date_str} {next_time}</i>\n"
                )
                datetime_end = datetime.strptime(
                    f"{date_str} {next_time}", "%d %a. %B %Y %H:%M"
                )
            date_index += 1
        index += 1

        # if not datetime_end and len(formated_dates) == 1:
        #     # create date end in 23:59 of the last date
        #     datetime_end = datetime.strptime(
        #         f"{formated_dates[-1]} {end_of_day_hour:02d}:{end_of_day_minute:02d}",
        #         "%d %a. %B %Y %H:%M",
        #     )
        #     f_datetime_end = datetime_end.strftime("%d %a. %B %Y %H:%M")
        #     text_message += f"<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <i>{f_datetime_end}</i>\n"
        #     print("datetime_end", datetime_end)

        # calculate total time from datetime_start to datetime_end
        if datetime_start and datetime_end and _type != "cron":
            # to seconds
            hours = interval.get("hours", 0) * 3600
            minutes = interval.get("minutes", 0) * 60

            total_posts += int(
                (datetime_end - datetime_start).total_seconds() // (hours + minutes)
            )

        elif datetime_start and _type != "cron":
            # if only datetime_start is set, calculate total posts for the last interval
            hours = interval.get("hours", 0) * 3600
            minutes = interval.get("minutes", 0) * 60
            # dadatetime_end should be 23:59:59
            datetime_end = datetime.strptime(
                f"{formated_dates[-1]} {end_of_day_hour:02d}:{59}",
                "%d %a. %B %Y %H:%M",
            )
            print("datetime_end", datetime_end)
            total_posts += int(
                (datetime_end - datetime_start).total_seconds() // (hours + minutes)
            )
            text_message += f"<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <i>–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ</i>\n"

    text_message += f"<b>–í—Å–µ–≥–æ:</b> <i>{total_posts}</i> <b>–ø–æ—Å—Ç–æ–≤</b> \n\n"
    return text_message
