from aiogram import F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.formatting import BlockQuote, Underline, as_list, as_marked_section

from bot import OWNER_ID, bot
from keyboard.keyboard import get_main_keyboard
from repositories import user_repository
from states.post import PostForm
from utils.messages import get_notify_update_version_message

from . import base_router


@base_router.message(Command("admin_message"))
async def admin_message_handler(message: Message, state: FSMContext) -> None:
    if OWNER_ID == str(message.from_user.id):
        await state.set_state(PostForm.admin_message)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞. "
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>bold</b> –∏–ª–∏ <i>italic</i>."
        )


@base_router.message(PostForm.admin_message)
async def send_admin_message_handler(message: Message, state: FSMContext) -> None:
    if OWNER_ID == str(message.from_user.id):
        text = message.text
        users = user_repository.get_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
            return

        for user in users:
            try:
                message = await bot.send_message(
                    user.chat_id,
                    f"<b>‚öúÔ∏è Admin:</b>\n\n {text}",
                    disable_web_page_preview=True,
                    parse_mode="HTML",
                )
                await bot.pin_chat_message(
                    user.chat_id,
                    message.message_id,
                    disable_notification=True,
                )
            except Exception as e:
                print(f"Failed to send message to {user.chat_id}: {e}")

        await state.clear()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@base_router.message(Command("users"))
async def users_handler(message: Message) -> None:
    if OWNER_ID == str(message.from_user.id):
        users = user_repository.get_all_users()
        text = message.text
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
            return

        user_list = "\n".join(
            f"{user.chat_id} - {user.username} - {user.full_name}" for user in users
        )
        await message.answer(
            f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{Underline(text)}\n\n{user_list}",
            parse_mode="HTML",
        )


@base_router.message(Command("version"))
async def version_handler(message: Message) -> None:
    if OWNER_ID == str(message.from_user.id):
        users = user_repository.get_all_users()
        for user in users:
            message = await bot.send_message(
                user.chat_id,
                get_notify_update_version_message(),
                disable_web_page_preview=True,
            )
            await bot.pin_chat_message(
                user.chat_id,
                message.message_id,
                disable_notification=False,
            )


@base_router.message(CommandStart())
@base_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start_handler(message: Message) -> None:
    content = BlockQuote(
        as_list(
            as_marked_section("", "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", marker="üïì "),
            as_marked_section("", "–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", marker="üîÉ "),
            as_marked_section("", "–ú—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã", marker="üì¢ "),
            as_marked_section(
                "", "–ú—É–ª—å—Ç–∏—Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", marker="‚úÖ "
            ),
            as_marked_section("", "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å –ø–æ—Å—Ç–æ–≤ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª–µ", marker="‚úçÔ∏è "),
        )
    )
    await message.answer(
        f"<b>–ë–æ—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b> –≤–µ–¥–µ–Ω–∏—è Telegram –ö–∞–Ω–∞–ª–æ–≤ –∏ –ß–∞—Ç–æ–≤ \n\n <b>ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç:</b>\n\n{content.as_html()}",
        reply_markup=get_main_keyboard(),
    )

    user = user_repository.find_by_chat_id(message.from_user.id)

    if not user:
        # todo: get timezone from url parameter
        timezone = "UTC"
        user_repository.create(
            message.from_user.id,
            message.from_user.username,
            message.from_user.full_name,
            timezone,
        )
        if OWNER_ID:
            await bot.send_message(
                OWNER_ID,
                f"New user: {message.from_user.id} {message.from_user.username} {message.from_user.full_name}",
            )
