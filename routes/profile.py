from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.utils.formatting import BlockQuote, TextLink, Underline

from keyboard.keyboard import (
    GeneralSettingsButtonData,
    get_general_settings_keyboard,
    get_multiposting_keyboard,
)
from repositories import user_repository
from states.post import PostForm
from utils.scheduler import parse_time_from_str

from . import user_router

timeframe_example = FSInputFile("assets/timeframe_example.png")


@user_router.message(Command("profile"))
@user_router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile_handler(message: Message) -> None:
    user = user_repository.find_by_chat_id(message.from_user.id)
    title = BlockQuote(Underline("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:"))
    user_link = TextLink(user.full_name, url=f"https://t.me/{user.username}")
    count_channels = user_repository.count_channels(user)
    count_posts = user_repository.count_posts(user)
    await message.answer(
        f"{title.as_html()}\n\n<b>–ò–º—è: {user.full_name}</b>\n<b>ID:<code>{user.chat_id}</code></b>\n<b>C—Å—ã–ª–∫–∞: {user_link.as_html()}</b>\n\n<b>üì£ –ö–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤: <code>{count_channels}</code></b>\n<b>üë• –ü–æ—Å—Ç–æ–≤: <code>{count_posts}</code></b>"
    )


@user_router.message(Command("settings"))
@user_router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_handler(
    message: Message,
    state: FSMContext,
) -> None:
    user = user_repository.find_by_chat_id(message.from_user.id)
    multiposting = user_repository.get_multiposting_by_user_id(user.id)
    if multiposting:
        time_frames = multiposting.time_frames.split("|")
        await state.update_data(
            time_frames=time_frames,
            time_frames_active="on" if multiposting.active else "off",
        )
    else:
        await state.update_data(time_frames=None, time_frames_active="off")

    title = BlockQuote("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    state_data = await state.get_data()

    await message.answer(
        f"{title.as_html()}\n\n", reply_markup=get_general_settings_keyboard(state_data)
    )


@user_router.callback_query(
    GeneralSettingsButtonData.filter(F.type == "general_settings_action")
)
async def show_general_settings_handler(
    query: CallbackQuery, state: FSMContext, callback_data: GeneralSettingsButtonData
) -> None:
    user = user_repository.find_by_chat_id(query.from_user.id)
    state_data = await state.get_data()

    if callback_data.action == "back":
        title = BlockQuote("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        await query.message.answer(
            f"{title.as_html()}\n\n",
            reply_markup=get_general_settings_keyboard(state_data),
        )

    if callback_data.action == "active_multiposting_timeframe":
        status = "on" if state_data.get("time_frames_active") == "off" else "off"
        user_repository.update_multiposting_active_timeframe(user, status)
        await state.update_data(time_frames_active=status)
        state_data = await state.get_data()
        await query.message.edit_reply_markup(
            inline_message_id=query.inline_message_id,
            reply_markup=get_multiposting_keyboard(state_data),
        )

    if callback_data.action == "delete_multiposting_timeframe":
        user_repository.delete_multiposting_timeframe(user)
        await state.update_data(time_frames=None)
        await query.message.answer(
            "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."
        )
        state_data = await state.get_data()

    if (
        callback_data.action == "show_multiposting_timeframe"
        or callback_data.action == "delete_multiposting_timeframe"
    ):
        await state.set_state(PostForm.time_frames)
        time_frames = state_data.get("time_frames")
        await query.message.answer(
            f"""<b>üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n
<b>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –º—É–ª—å—Ç–∏–ø–æ—Å—Ç–∏–Ω–≥–∞, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤.</b>\n\n
–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n
{BlockQuote("\n".join(time_frames)).as_html() if time_frames else ""}\n\n
"""
        )
        await query.message.answer_photo(
            timeframe_example,
            parse_mode="HTML",
            reply_markup=get_multiposting_keyboard(state_data),
        )


@user_router.message(PostForm.time_frames)
async def create_time_frames_handler(message: Message, state: FSMContext) -> None:
    user = user_repository.find_by_chat_id(message.from_user.id)
    # state_data = await state.get_data()
    # split text by \n and remove empty strings
    time_frames = message.text.split("\n")
    time_frames = [
        time_frame.strip() for time_frame in time_frames if time_frame.strip()
    ]
    # check if time_frames is empty
    if not time_frames:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è.")
        return
    # check if time_frames is valid
    time_frames_list = []
    for time_frame in time_frames:
        try:
            (hours, minutes) = parse_time_from_str(time_frame)
            time_frames_list.append(f"{hours}:{minutes}")

        except Exception as e:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º—è–Ω–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return

    user_repository.create_multiposting(user, time_frames_list)
    await state.update_data(time_frames=time_frames_list)
    state_data = await state.get_data()
    await message.answer(
        f"""üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n {BlockQuote("\n".join(time_frames_list)).as_html()}""",
        parse_mode="HTML",
    )
    await message.answer_photo(
        timeframe_example,
        parse_mode="HTML",
        reply_markup=get_multiposting_keyboard(state_data),
    )
